name: .NET

on:
  push:
    branches: [ master ]
    paths: 
      - .github/workflows/*
      - src/*
      - tests/*
      
  pull_request:
    branches: [ master ]
    types: 
      - opened
      - reopened
      - synchronize 
      - closed
      
  workflow_dispatch:
  
    inputs:   
    
      versionSuffix:
        required: false
        description: "Version suffix for nupkg"
        default: 'beta'
        
      nugetRelease:
        required: true
        description: "nuget release? (1/0)"
        default: '0'

jobs:
  environment : 
    runs-on: ubuntu-latest
    
    outputs:      
      versionSuffix : ${{ steps.defaults.outputs.versionSuffix }}
      nugetRelease : ${{ steps.defaults.outputs.nugetRelease }}
      verbosity : ${{ steps.defaults.outputs.verbosity }}
      configuration : ${{ steps.defaults.outputs.configuration }}
      mergePR : ${{ steps.defaults.outputs.mergePR }}

    steps:
    
      - name: declare default values 
        id: defaults
        shell: pwsh
        run: |        
          $notManual = "$env:GITHUB_EVENT_NAME" -ne "workflow_dispatch"
          Write-Host "notManual: $notManual"
          
          $mergePR = "pull_request|closed|true" -eq "${{github.event_name}}|${{github.event.action}}|${{github.event.pull_request.merged}}"
          $doRelease = ("${{ github.event.inputs.nugetRelease }}" -eq "1") -Or ($notManual -And $mergePR)
          Write-Host "doRelease: $doRelease"
          
          $values = @(
              @("mergePR", $notManual, "${{ github.event.inputs.versionSuffix }}", "beta"),
              @("versionSuffix", $notManual, "${{ github.event.inputs.versionSuffix }}", "beta"),
              @("nugetRelease", $true, "${{ github.event.inputs.nugetRelease }}", "1"),
              @("verbosity", $true, "${{ github.event.inputs.verbosity }}", "minimal"),
              @("configuration", $true, "${{ github.event.inputs.configuration }}", "Release")
            )
            
          foreach($pair in $values){
            $value = $pair[2]
            if($pair[1] -eq $true -And [string]::IsNullOrEmpty("$value") -eq $true){
                    $value = $pair[3]
            }
            
            Write-Host "Assigning $($pair[0]) => $value"

            echo "::set-output name=$($pair[0])::$value"
          }
          
  build:
    if: false
    runs-on: ubuntu-latest
    needs: environment

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
    - name: Restore dependencies
      run: dotnet restore src/All.sln
    - name: Build
      run: dotnet build src/All.sln --no-restore --verbosity m -c Release
    - name: Test
      run: dotnet test src/All.sln --no-build --verbosity normal -c Release
    - name: Pack
      run: dotnet pack src/Amusoft.Templates/Amusoft.Templates.csproj -o artifacts/nupkg --no-build --verbosity normal -c Release /p:VersionSuffix=${{ github.event.inputs.versionSuffix }}
    
    - name: Release
      run: dotnet nuget push "artifacts/nupkg/*.nupkg" -k $NUGETKEY -s https://api.nuget.org/v3/index.json
      if: ${{ github.event.inputs.nugetRelease == '1' }}
      env:
        NUGETKEY: ${{ secrets.NUGET }}
        
        
    
