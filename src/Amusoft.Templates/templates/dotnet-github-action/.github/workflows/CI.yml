name: CI

permissions:
  pages:
    write
  contents: 
    write
  pull-requests: 
    write
  id-token:
    write
  packages: 
    write
    
on:
  push:
    branches: [ BRANCHTRIGGER ]
    paths:
      - .github/workflows/CI.yml
      - src/**/*
      - tests/**/*
  
  pull_request:
    branches: [ BRANCHTRIGGER ]
    types:
      - opened
      - synchronize
  
  workflow_dispatch:
    inputs:
      publish:
        type: boolean
        description: run publish?
        default: true

      verbosity:
        description: build log verbosity
        default: minimal
        type: choice
        options:
          - quiet
          - minimal
          - normal
          - detailed
          - diagnostic
    
jobs:

  parameters:
    runs-on: ubuntu-latest
    
    outputs:
      verbosity: ${{ steps.parameters.outputs.verbosity }}
      publish: ${{ steps.parameters.outputs.publish }}
      updateReadme: ${{ steps.parameters.outputs.updateReadme }}
    
    steps:

      - name: Setting up parameters
        id: parameters
        shell: pwsh
        run: |
          Write-Host "Setting up parameters"
          
          $branch = "BRANCHTRIGGER"
          $verb = "${{github.event.inputs.verbosity}}"
          $publ = "${{github.event.inputs.publish}}"
          $bnr = "${{github.run_number}}"
          
          $commitMode = "noop"          
          if($commitMode -eq "noop" -and "${{github.event_name}}" -eq "workflow_dispatch") {
              $commitMode = "dispatch" }
          if($commitMode -eq "noop" -and "$branch|pull_request|closed|true" -eq "${{github.ref_name}}|${{github.event_name}}|${{github.event.action}}|${{github.event.pull_request.merged}}") {
              $commitMode = "pushMerge" }
          if($commitMode -eq "noop" -and "$branch|push" -eq "${{github.ref_name}}|${{github.event_name}}") {
              $commitMode = "push" }
          if("${{github.event_name}}" -eq "workflow_dispatch" -and [string]::IsNullOrEmpty($suffix) -eq $false){
              $suffix = "$($suffix.TrimEnd(".")).$bnr" }
          
          $json = @"
          {
            "verbosity" :           {"push" : "n",          "pushMerge" : "n",          "noop" : "n",       "dispatch" : "$verb"},
            "publish" :             {"push" : "false",      "pushMerge" : "false",      "noop" : "false",   "dispatch" : "$publ"},
            "runCoverage" :         {"push" : "true",       "pushMerge" : "true",       "noop" : "noop",    "dispatch" : "true"},
            "updateReadme" :        {"push" : "true",       "pushMerge" : "true",       "noop" : "false",   "dispatch" : "$publ"},
          }
          "@ | ConvertFrom-Json
          
          $props = $json.psobject.properties.name
          
          Write-Host "Identified commit mode $commitMode"
          echo "Identified commit mode $commitMode" >> $env:GITHUB_STEP_SUMMARY
          foreach($prop in $props){
            Write-Host "$prop=$($json.$prop.$commitMode)"
            echo "$prop=$($json.$prop.$commitMode)" >> $env:GITHUB_OUTPUT
            echo "$prop=$($json.$prop.$commitMode)" >> $env:GITHUB_STEP_SUMMARY
          }

  build:
    needs: [ parameters ]
    uses: taori/actions/.github/workflows/github-dotnet-action-build.yml@v11
    with:
      solutionPath: src/MyConsoleApp.slnx
      verbosity: ${{ needs.parameters.outputs.verbosity }}      
      testArguments: "--filter Category!=SkipInCI"
      concurrencyAbortable: true
      dotnetVersion: |
        5.0.x
        6.0.x
        8.0.x
        9.0.x

  coverage:
    needs: [ build, parameters ]
    uses: taori/actions/.github/workflows/coverage.yml@v11
    with:
      coberturaArtifactsName: ${{ needs.build.outputs.artifact-name-cobertura }}
      githubPagesUrl: "https://GITOWNER.github.io/GITPROJECT"
      threshold: '85 95'
      debugWorkflow: false

  deploy:
    needs: [ parameters, coverage ]
    uses: taori/actions/.github/workflows/github-dotnet-action-deploy.yml@v11
    with:
      imageTags: |
        ghcr.io/GITOWNER/ACTIONNAME:latest
      push: ${{ needs.parameters.outputs.publish == 'true' }}
      
      
#https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry